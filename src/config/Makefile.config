# Available from: git clone https://code.ornl.gov/isp/acme_inputdata
ELM_DATA_LOCATION = /Users/uec/codes/elm/kernels/repos/ELM_Kernels/repos/acme_inputdata

# assumes you have a working NETCDF.  This can easily be the version built by
# ATS as a part of an ATS installation.
NETCDF_ROOT                     = /Users/uec/codes/ats/amanzi-tpls/install-0.88

# assumes you have a working fortran and c++ compilers with libraries
FC            = gfortran
FC_FLAGS       = -fimplicit-none -free -g3 -fbounds-check -fbacktrace
FC_LIB_ROOT = /usr/local/Cellar/gcc/8.2.0/lib/gcc/8

CC	      = clang++
CPP_FLAGS      = -g -Wall -Wshadow -std=c++11
STD_LIB_ROOT  = /usr

# note, the linker should almost always be your fortran compiler, NOT your c compiler
#LINKER        = gfortran
CC_LD_FLAGS      = -L$(OBJECT)fortran -lelm -L$(NETCDF_ROOT)/lib -lnetcdf -L$(STD_LIB_ROOT)/lib -lc++ -L$(FC_LIB_ROOT) -lgfortran
FC_LD_FLAGS      = -L$(OBJECT)fortran -lelm -L$(NETCDF_ROOT)/lib -lnetcdff


# ------------------------------------------------
# Hopefully below shouldn't have to be changed.
# ------------------------------------------------

.PHONY: all

.PRECIOUS: %.cc.o %.F90.o
.SUFFIXES: .cc.o .F90.o .cc .F90

%.F90.o: %.F90
	$(FC) $(FC_FLAGS) -c $< -o $@ 
%.cc.o: %.cc
	$(CXX) $(CC_FLAGS) $(CPP_FLAGS) $(INC_FLAGS) -c $< -o $@

SHELL         = /bin/sh



ELM_LIB				= libelm.a
ELM_LIBS                        = -lelm
ELM_DIR                         = elm


ELM_UTILS_DIR = cime_utils

LIB_SUFFIX=.a

M4	      =	
RM            = rm -fr
CP            = cp
XARGS	      = 
AR	      = ar

######################################################################
# Rules used in all directories.
######################################################################

ELM_CLEAN=$(RM) -f *.o *.ii *.int.c *.log *.log.* stamp-* core core.* stats -r ti_files ii_files *.mod *.a



